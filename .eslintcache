[{"C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\index.js":"1","C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Reducer.js":"2","C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\App.js":"3","C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Components\\Question.js":"4","C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Components\\FinalScreen.js":"5","C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Components\\WelcomeScreen.js":"6"},{"size":426,"mtime":1649528309214,"results":"7","hashOfConfig":"8"},{"size":1724,"mtime":1649528098299,"results":"9","hashOfConfig":"8"},{"size":781,"mtime":1649528098311,"results":"10","hashOfConfig":"8"},{"size":3710,"mtime":1649529053715,"results":"11","hashOfConfig":"8"},{"size":606,"mtime":1649529334114,"results":"12","hashOfConfig":"8"},{"size":1093,"mtime":1649529138855,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"xqna5f",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\index.js",[],["28","29"],"C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Reducer.js",[],"C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\App.js",[],"C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Components\\Question.js",["30"],"import React, { useState, useEffect } from 'react'\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nconst decodeHTML = function (html) {\r\n  const txt = document.createElement('textarea')\r\n  txt.innerHTML = html\r\n  return txt.value\r\n}\r\n\r\nfunction Question() {\r\n  const [questions, setQuestions] = useState([])\r\n  const [answerSelected, setAnswerSelected] = useState(false)\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\r\n  const [options, setOptions] = useState([])\r\n\r\n  const score = useSelector((state) => state.score)\r\n  const encodedQuestions = useSelector((state) => state.questions)\r\n\r\n  useEffect(() => {\r\n    const decodedQuestions = encodedQuestions.map(q => {\r\n      return {\r\n        ...q,\r\n        question: decodeHTML(q.question),\r\n        correct_answer: decodeHTML(q.correct_answer),\r\n        incorrect_answers: q.incorrect_answers.map(a => decodeHTML(a))\r\n      }\r\n    })\r\n\r\n    setQuestions(decodedQuestions)\r\n  }, [encodedQuestions])\r\n  const questionIndex = useSelector((state) => state.index)\r\n  const isDone = useSelector((state) => state.isDone)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const question = questions[questionIndex]\r\n  const answer = question && question.correct_answer\r\n\r\n  const getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!question) {\r\n      return;\r\n    }\r\n    let answers = [...question.incorrect_answers]\r\n    answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer)\r\n\r\n    setOptions(answers)\r\n  }, [question])\r\n\r\n  const handleListItemClick = (event) => {\r\n    setAnswerSelected(true)\r\n    setSelectedAnswer(event.target.textContent)\r\n\r\n    if (event.target.textContent === answer) {\r\n      dispatch({\r\n        type: 'SET_SCORE',\r\n        score: score + 1,\r\n      })\r\n    }\r\n\r\n    if (questionIndex + 1 <= questions.length) {\r\n      setTimeout(() => {\r\n        setAnswerSelected(false)\r\n        setSelectedAnswer(null)\r\n\r\n        dispatch({\r\n          type: 'SET_INDEX',\r\n          index: questionIndex + 1,\r\n        })\r\n      }, 2500)\r\n    }\r\n  };\r\n\r\n\r\n  const renderTime = ({ remainingTime }) => {\r\n    if (remainingTime === 0) {\r\n      dispatch({\r\n        type: 'SET_IS_DONE',\r\n        isDone: true,\r\n      })\r\n      return <div className=\"timer\">Too lale...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n          <div className=\"text\">Remaining</div>\r\n          <div className=\"value\">{remainingTime}</div>\r\n          <div className=\"text\">seconds</div>\r\n        </div>\r\n    );\r\n  };\r\n\r\n  const getClass = option => {\r\n    if (!answerSelected) {\r\n      return ``;\r\n    }\r\n\r\n    if (option === answer) {\r\n      return `correct`\r\n    }\r\n\r\n    if (option === selectedAnswer) {\r\n      return `selected`\r\n    }\r\n  }\r\n\r\n  if (!question) {\r\n    return <div>Loading</div>\r\n  }\r\n\r\n  return (\r\n\r\n    <div>\r\n      <div>\r\n        <CountdownCircleTimer\r\n            isPlaying\r\n            duration={10}\r\n            colors={[\"#004777\", \"#F7B801\", \"#A30000\", \"#A30000\"]}\r\n            colorsTime={[10, 6, 3, 0]}\r\n            onComplete={() => (\r\n                { shouldRepeat: false, delay: 1 })}\r\n        >\r\n          {renderTime}\r\n        </CountdownCircleTimer>\r\n      </div>\r\n      <p>Question {questionIndex + 1}</p>\r\n      <h3>{question.question}</h3>\r\n      <ul>\r\n        {options.map((option, i) => (\r\n          <li key={i} onClick={handleListItemClick} className={getClass(option)}>\r\n            {option}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div>\r\n        Score: {score}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Question\r\n","C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Components\\FinalScreen.js",[],"C:\\Users\\David\\WebstormProjects\\quiz-app\\src\\Components\\WelcomeScreen.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":33,"column":9,"nodeType":"37","messageId":"38","endLine":33,"endColumn":15},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'isDone' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]